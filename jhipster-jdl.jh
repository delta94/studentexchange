entity Country {
   name String,
   enabled Boolean,
   createAt Instant,
   updateAt Instant
}

entity Region {
   name String,
   enabled Boolean,
   createAt Instant,
   updateAt Instant
}

entity City {
   name String,
   index Integer,
   enabled Boolean,
   createAt Instant,
   updateAt Instant
}

entity District {
   name String,
   type String,
   latitude Float,
   longitude Float,
   enabled Boolean,
   createAt Instant,
   updateAt Instant
}

entity Ward {
   name String,
   type String,
   latitude Float,
   longitude Float,
   enabled Boolean,
   createAt Instant,
   updateAt Instant
}

relationship ManyToMany {
   Region{user(login)} to User
}

relationship OneToMany {
   City{districts} to District,
   Region{countries} to Country,
   District{wards} to Ward
}

enum Gender {
   MALE, FEMALE, OTHER
}

entity UserProfile {
   fullName String,
   gender Gender,
   email String,
   mobile String,
   address String,
   createAt Instant,
   updateAt Instant
}

relationship OneToOne {
   UserProfile{createBy(login)} to User,
   UserProfile{updateBy(login)} to User,
   UserProfile{city(name)} to City,
   UserProfile{district(name)} to District
}

entity UserShippingAddress {
   name String,
   address String,
   mobile String,
   note String,
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   UserShippingAddress{createBy(login)} to User,
   UserShippingAddress{updateBy(login)} to User,
   UserShippingAddress{city(name)} to City,
   UserShippingAddress{district(name)} to District
}

relationship OneToMany {
   UserProfile{address} to UserShippingAddress
}

enum StatusType {
   OPEN, PENDING, PAID, CANCELED, EXPIRED, SOLD
}

entity OrderCart {
   code Long,
   shippingChinaCode String,
   avatar String,
   aliwangwang String,
   amountDiscount Float,
   amountPaid Float,
   depositAmount Float,
   depositRatio Float,
   depositTime Instant,
   domesticShippingChinaFeeNDT Float,
   domesticShippingChinaFee Float,
   domesticShippingVietnamFee Float,
   quantityOrder Integer,
   quantityPending Integer,
   quantityReceived Integer,
   rate Float,
   receiverName String,
   receiverAddress String,
   receiverMobile String,
   receiverNote String,
   refundAmountByAlipay Float,
   refundAmountByComplaint Float,
   refundAmountByOrder Float,
   refundAmountPending Float,
   shippingChinaVietnamFee Float,
   shippingChinaVietnamFeeDiscount Float,
   serviceFee Float,
   serviceFeeDiscount Float,
   itemChecking Boolean,
   itemWoodCrating Boolean,
   shopId String,
   shopLink String,
   shopName String,
   shopNote String,
   website String,
   status OrderStatus,
   statusName String,
   statusStyle String,
   tallyFee Float,
   totalAmount Float,
   totalAmountNDT Float,
   totalPaidByCustomer Float,
   totalServiceFee Float,
   totalQuantity Integer,
   finalAmount Float,
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   OrderCart{buyer(login)} to User,
   OrderCart{chinaStocker(login)} to User,
   OrderCart{vietnamStocker(login)} to User,
   OrderCart{exporter(login)} to User,
   OrderCart{createBy(login)} to User,
   OrderCart{updateBy(login)} to User
}

enum OrderStatus {
  DEPOSITED, ARE_BUYING, PURCHASED, SELLER_DELIVERY, WAREHOUSE_CHINA, DELIVERING_CHINA_VIETNAM, WAREHOUSE_VIETNAM, DELIVERY_REQUIREMENTS, DELIVERING_VIETNAM, DELIVERED, CANCELLED, LOST, RETURN
}

entity OrderHistory {
   status OrderStatus,
   description String,
   createAt Instant
}

relationship ManyToOne {
   OrderHistory{createBy(login)} to User,
   OrderHistory{updateBy(login)} to User
}

enum CustomerLevel {
   NORMAL, SILVER, GOLD, PLATINUM
}

entity OrderItem {
   itemId String,
   itemImage String,
   itemName String,
   itemLink String,
   itemPrice Float,
   itemPriceNDT Float,
   itemNote String,
   propertiesId String,
   propertiesImage String,
   propertiesMD5 String,
   propertiesName String,
   propertiesType String,
   quantity Integer,
   requireMin Integer,
   totalAmount Float,
   totalAmountNDT Float,
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   OrderItem{createBy(login)} to User,
   OrderItem{updateBy(login)} to User
}

entity OrderPackage {
   ladingCode String,
   heightPackage Float,
   widthPackage Float,
   lengthPackage Float,
   netWeight Float,
   status String,
   statusName String,
   statusStyle String,
   createAt Instant,
   updateAt Instant
}

entity OrderPackageHistory {
   status String,
   statusName String,
   statusStyle String,
   createAt Instant,
   updateAt Instant
}

relationship OneToMany {
   OrderPackage{packages} to OrderPackageHistory
}

relationship ManyToOne {
   OrderPackage{warehouse} to Warehouse,
   OrderPackage{createBy(login)} to User,
   OrderPackage{updateBy(login)} to User,
   OrderPackageHistory{warehouse} to Warehouse,
   OrderPackageHistory{createBy(login)} to User,
   OrderPackageHistory{updateBy(login)} to User
}

enum OrderTransactionType {
   DEPOSIT, ORDER_PAYMENT, REFUND
}

entity OrderTransaction {
   amount Float,
   note String,
   status OrderTransactionType,
   createAt Instant
}

relationship ManyToOne {
   OrderTransaction{orderCode(code)} to OrderCart,
   OrderTransaction{createBy(login)} to User
}

enum CommentType {
   CUSTOMER_LOG, CUSTOMER_CHAT, STAFF_LOG, STAFF_CHAT, SYSTEM_LOG
}

entity OrderComment {
   message String,
   sender String,
   type CommentType,
   createAt Instant
}

relationship OneToMany {
   OrderCart{items} to OrderItem,
   OrderCart{comments} to OrderComment,
   OrderCart{histories} to OrderHistory,
   OrderCart{packages} to OrderPackage,
   OrderCart{transactions} to OrderTransaction
}

enum PaymentMethod {
   CASH, BANK_TRANSFER, CARD, PAYPAL
}

enum PaymentStatusType {
   PENDING, PAID, CANCELED
}

enum PaymentType {
   DEPOSIT, ORDER_PAYMENT, REFUND
}

entity Payment {
   amount Float,
   code Long,
   newBalance Float,
   note String,
   orderCode String,
   method PaymentMethod,
   type PaymentType,
   status PaymentStatusType,
   createAt Instant,
   withdrawalFee Float
}

relationship ManyToOne {
   Payment{staffApproval(login)} to User,
   Payment{staffCancel(login)} to User,
   Payment{customer(login)} to User,
   Payment{createBy(login)} to User
}

entity UserBalance {
   balanceAvailable Float,
   balanceFreezing Float,
   cash Float,
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   UserBalance{createBy(login)} to User
}

entity ShoppingCart {
   avatar String,
   aliwangwang String,
   depositAmount Float,
   depositRatio Float,
   serviceFee Float,
   serviceFeeDiscount Float,
   itemChecking Boolean,
   itemWoodCrating Boolean,
   shopId String,
   shopLink String,
   shopName String,
   shopNote String,
   website String,
   tallyFee Float,
   totalAmount Float,
   totalQuantity Integer,
   finalAmount Float,
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   ShoppingCart{createBy(login)} to User,
   ShoppingCart{updateBy(login)} to User
}

entity ShoppingCartItem {
   itemId String,
   itemImage String,
   itemName String,
   itemLink String,
   itemPrice Float,
   itemPriceNDT Float,
   itemNote String,
   propertiesId String,
   propertiesImage String,
   propertiesMD5 String,
   propertiesName String,
   propertiesType String,
   quantity Integer,
   requireMin Integer,
   totalAmount Float,
   totalAmountNDT Float,
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   ShoppingCartItem{createBy(login)} to User,
   ShoppingCartItem{updateBy(login)} to User
}

entity Warehouse {
   name String,
   address String,
   createAt Instant,
   updateAt Instant
}

entity Delivery {
   deliveryMethod String,
   deliveryMethodName String,
   exportTime Instant,
   packedTime Instant,
   status String,
   statusName String,
   statusStyle String,
   totalWeight Float,
   createAt Instant,
   updateAt Instant
}

entity DeliveryPackage {
   createAt Instant,
   updateAt Instant
}

relationship ManyToOne {
   DeliveryPackage{createBy(login)} to User,
   DeliveryPackage{updateBy(login)} to User
   Delivery{warehouse} to Warehouse,
   Delivery{createBy(login)} to User,
   Delivery{updateBy(login)} to User
}

relationship OneToMany {
   ShoppingCart{items} to ShoppingCartItem,
   Delivery{packages} to DeliveryPackage,
   Delivery{orders} to OrderPackage
}

enum CurrencyType {
   USD, EUR, CNY, JPY, KPW
}

entity CurrencyRate {
   currency CurrencyType,
   rate Float,
   createAt Instant
}

relationship ManyToOne {
   Delivery{createBy(login)} to User
}
// Set pagination options
paginate Region, City, District, Ward, Country with pagination

paginate UserProfile with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceClass

filter Region, City, District, Ward, Country, UserProfile

filter Payment, OrderCart
